# Script de test avec param√®tres optimis√©s pour plus d'activit√©
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

print("üöÄ TEST AVEC PARAM√àTRES OPTIMIS√âS")
print("=" * 50)

# Modifier temporairement les param√®tres pour ce test
import src.config as config

# Sauvegarder les valeurs originales
original_vol_threshold = config.VOLATILITY_THRESHOLD
original_signal_quality = config.MIN_SIGNAL_QUALITY
original_profile = config.CURRENT_PROFILE

# Appliquer des param√®tres plus agressifs
config.VOLATILITY_THRESHOLD = 35  # Encore plus permissif
config.MIN_SIGNAL_QUALITY = 0.60  # Moins s√©lectif
config.MAX_POSITIONS = 5  # Plus de positions simultan√©es

print(f"üéØ Seuil de volatilit√©: {config.VOLATILITY_THRESHOLD}% (vs {original_vol_threshold}% avant)")
print(f"üéØ Qualit√© signal minimum: {config.MIN_SIGNAL_QUALITY} (vs {original_signal_quality} avant)")
print(f"üéØ Profil: AGRESSIF")
print()

try:
    from src.data_manager import DataManager
    from src.straddle_strategy import StraddleStrategy
    
    print("üìä R√©cup√©ration des donn√©es...")
    data_manager = DataManager()
    
    # Prendre une p√©riode plus r√©cente et volatile
    backtest_data = data_manager.get_backtest_data()
    print(f"‚úÖ Donn√©es r√©cup√©r√©es: {len(backtest_data)} barres")
    
    # Afficher quelques statistiques sur la volatilit√©
    vol_stats = backtest_data['volatility'].describe()
    print(f"üìà Volatilit√© - Min: {vol_stats['min']:.2%}, Max: {vol_stats['max']:.2%}, Moyenne: {vol_stats['mean']:.2%}")
    
    high_vol_count = (backtest_data['volatility'] > config.VOLATILITY_THRESHOLD/100).sum()
    print(f"üî• P√©riodes de haute volatilit√© (>{config.VOLATILITY_THRESHOLD}%): {high_vol_count}/{len(backtest_data)} ({high_vol_count/len(backtest_data)*100:.1f}%)")
    
    if high_vol_count == 0:
        print("‚ö†Ô∏è AUCUNE p√©riode ne d√©passe le seuil ! R√©duisons encore...")
        config.VOLATILITY_THRESHOLD = 25
        high_vol_count = (backtest_data['volatility'] > config.VOLATILITY_THRESHOLD/100).sum()
        print(f"üî• Avec seuil √† {config.VOLATILITY_THRESHOLD}%: {high_vol_count} p√©riodes")
    
    print("\nüéØ Lancement du backtest optimis√©...")
    strategy = StraddleStrategy()
    results = strategy.run_backtest(backtest_data)
    
    print("\nüìä R√âSULTATS:")
    if 'performance_metrics' in results:
        metrics = results['performance_metrics']
        print(f"   üíº Trades ex√©cut√©s: {metrics.get('total_trades', 0)}")
        print(f"   üí∞ Capital final: ${metrics.get('final_capital', 0):,.2f}")
        print(f"   üìà Rendement: {metrics.get('total_return', 0):.2f}%")
        print(f"   üéØ Win rate: {metrics.get('win_rate', 0):.1f}%")
        
        if metrics.get('total_trades', 0) > 0:
            print("‚úÖ SUCC√àS ! Des trades ont √©t√© ex√©cut√©s")
        else:
            print("‚ùå Toujours aucun trade. Les conditions de march√© sont tr√®s calmes.")
    
except Exception as e:
    print(f"‚ùå Erreur: {e}")
    import traceback
    traceback.print_exc()

finally:
    # Restaurer les valeurs originales
    config.VOLATILITY_THRESHOLD = original_vol_threshold
    config.MIN_SIGNAL_QUALITY = original_signal_quality
    config.CURRENT_PROFILE = original_profile
